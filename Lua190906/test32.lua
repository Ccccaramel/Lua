-- 垃圾回收
-- lua采用了自动闪存管理.
-- lua实现了一个增量标记-扫描收集器.它使用这两个数字来控制垃圾收集循环:垃圾收集器间歇率和垃圾收集器步进倍率.
-- 这两个数字都是用百分数为单位(例如:值100在内部表示1).
-- 垃圾收集器间歇率控制着收集器需要在开启新的循环前要等待多久.增大这个值会减少收集器的积极性.
-- 当这个值比100小的时候,收集器在开启新的循环前不会有等待.
-- 设置这个值为200就会让收集器等到总内存使用量达到之前两倍时才开始新的循环.
-- 垃圾收集器步进倍率控制着收集器运作速度相对于内存分配速度的倍率.
-- 增大这个值不仅会让收集器更加积极,还会增加每个增量步骤的长度.
-- 不要把这个值设的小于100,那样的话收集器就工作的太慢了以至于永远都干不完一个循环.
-- 默认值是200,这表示收集器以内存分配的"两倍"速工作.
-- 如果你把步进倍率设为一个非常大的数字,收集器的行为就像一个stop-the-world收集器.

-- 垃圾回收器函数
-- lua提供了以下函数collectgarbage([opt[,arg]])用来控制自动内尊管理:
-- collectgarbage("collect")         昨晚一次完整的垃圾循环.通过参数opt它提供了一组不同的功能
-- collectgarbage("count")           以K字节数为单位返回lua使用的总内存数.这个值有小数部分,所以只需乘1024就能得到lua使用的准确字节数(除非溢出)
-- collectgarbage("restart")         重启垃圾收集器的自动运行
-- collectgarbage("setpause")        将arg设为收集器的间歇率.返回间歇率的前一个值
-- collectgarbage("setstepmul")      单步运行垃圾收集器.步长"大小"由arg控制.传入0时,收集器步进(不可分割的)一步.
--                                   传入非0值,收集器收集相当于lua分配这些多(K字节)内存的工作.如果收集器结束一个循环将返回true
-- collectgarbage("step")            停止垃圾收集器的运行.在调用重启前,收集器只会因显式的调用运行